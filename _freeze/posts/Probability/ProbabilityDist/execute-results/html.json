{
  "hash": "aff93cffab7db32d171d91a22dc76c5c",
  "result": {
    "markdown": "---\ntitle: Probability Disteribution and Random Variables\nimage: Shopping.jpeg\ndate: '2023-11-28'\ncategories:\n  - Analysis\n  - Visualization\n---\n\n## Probability Distributions:\nProbability distributions are mathematical functions that describe the likelihood of different outcomes occurring in an experiment or event. They define the probabilities associated with each possible value that a random variable can take.\n\n## Random Variables:\n\nA random variable is a variable whose possible values are numerical outcomes of a random phenomenon. It can take on different values according to the outcome of a random event. Random variables can be categorized as discrete or continuous.\n\n## Common Probability Distributions:\n\n- Uniform Distribution: All outcomes are equally likely within a specified range. It has a constant probability density over the range.\n- Normal Distribution (Gaussian Distribution): Often called the bell curve, it is symmetric around the mean and characterized by its mean and standard deviation. Many natural phenomena follow this distribution.\n- Exponential Distribution: Models the time between events occurring at a constant average rate and has a decreasing probability density as time increases.\n- Poisson Distribution: Describes the number of events occurring in a fixed interval of time or space, given a known average rate of occurrence.\n- Binomial Distribution: Deals with the number of successful outcomes in a fixed number of trials, each with the same probability of success.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.mixture import GaussianMixture\n\n# Generating synthetic data for customer purchase amounts\nnp.random.seed(42)\n\n# Simulating data for two customer segments (high spenders and low spenders)\nhigh_spenders = np.random.normal(150, 25, 500)  # High spender segment\nlow_spenders = np.random.normal(50, 15, 300)   # Low spender segment\n\n# Concatenating data for both segments to create the overall dataset\ncustomer_data = np.concatenate([high_spenders, low_spenders]).reshape(-1, 1)\n\n# Fitting a Gaussian Mixture Model to the data\ngmm = GaussianMixture(n_components=2, random_state=42)\ngmm.fit(customer_data)\n\n# Predicting the clusters\nlabels = gmm.predict(customer_data)\nprobs = gmm.predict_proba(customer_data)\n\n# Plotting the data and the identified clusters\nplt.figure(figsize=(8, 6))\nplt.scatter(customer_data, np.zeros_like(customer_data), c=labels, cmap='viridis', s=50, alpha=0.5)\nplt.title('Customer Segmentation based on Purchase Behavior')\nplt.xlabel('Purchase Amount ($)')\nplt.ylabel('Cluster')\nplt.grid(True)\nplt.show()\n\n```\n\n::: {.cell-output .cell-output-display}\n![](ProbabilityDist_files/figure-html/cell-2-output-1.png){width=683 height=523}\n:::\n:::\n\n\n### Algorithm Explanation\n- This example generates synthetic customer purchase data for two segments: high spenders and low spenders.\n- High spenders are simulated with a mean purchase amount of $150 and a standard deviation of $25 (high_spenders).\n- Low spenders are simulated with a mean purchase amount of $50 and a standard deviation of $15 (low_spenders).\n- Both segments' data are concatenated to create the overall customer dataset (customer_data).\n- A Gaussian Mixture Model (GMM) with n_components=2 is fitted to the customer purchase data..\n\n",
    "supporting": [
      "ProbabilityDist_files"
    ],
    "filters": [],
    "includes": {}
  }
}